name: Linux

on:
  push:
    branches:
      - '*'

    tags:
      - 'v*'

  pull_request:
    branches:
      - '*'

jobs:
  linux_build:
    runs-on: ${{ matrix.os }}

    strategy:
      matrix:
        os: [ubuntu-20.04]
        build_type: [Release]
        zeek_version: ['3.1']

    env:
      UPLOAD_RELEASE: false
    
    steps:
    - uses: actions/checkout@v2

    - name: Select the CMake version
      id: cmake_version
      run: echo ::set-output name=VALUE::3.16.3

    - name: Select the sanitizers setting
      id: sanitizers_settings
      run: |
        if [[ "${{ matrix.build_type }}" == "Debug" ]] ; then
          echo ::set-output name=VALUE::true
        else
          echo ::set-output name=VALUE::false
        fi

    - name: Generate the cache key
      id: cache_key
      run: echo ::set-output name=VALUE::${{ matrix.os }}_type-${{ matrix.build_type }}_osquery-toolchain-1.1.0_cmake-${{ steps.cmake_version.outputs.VALUE }}_zeek-version-${{ matrix.zeek_version }}

    - name: Update the cache (ccache)
      uses: actions/cache@v1.0.3
      with:
        path: ccache
        key: ${{ steps.cache_key.outputs.VALUE }}_ccache

    - name: Update the cache (Downloads)
      uses: actions/cache@v1.0.3
      with:
        path: downloads
        key: ${{ steps.cache_key.outputs.VALUE }}_downloads

    - name: Update the cache (git submodules - Zeek Agent)
      uses: actions/cache@v1.0.3
      with:
        path: .git/modules
        key: ${{ steps.cache_key.outputs.VALUE }}_zeekagent_gitsubmodules

    - name: Create the build folders
      run: mkdir -p ccache build install downloads package

    - name: Synchronize the submodules
      run: git submodule sync --recursive

    - name: Update the submodules
      run: git submodule update --init --recursive

    - name: Install system dependencies
      run: sudo apt-get install cppcheck ccache curl flex bison rpm doxygen ninja-build graphviz -y

    - name: Install CMake
      id: cmake_installer
      run: |
        if [ ! -f downloads/cmake.tar.gz ] ; then
          curl -L "https://github.com/Kitware/CMake/releases/download/v${{ steps.cmake_version.outputs.VALUE }}/cmake-${{ steps.cmake_version.outputs.VALUE }}-Linux-x86_64.tar.gz" -o downloads/cmake.tar.gz
        fi

        tar xzf downloads/cmake.tar.gz
        echo ::set-output name=CMAKE_BINARY::$(realpath $(find cmake* -type d -name bin)/cmake)

    - name: Configure the project
      run: |
        sudo apt-get update -y
        sudo apt-get install -y libunwind-dev
        sudo apt-get install -y libssl-dev
        sudo update-alternatives --install /usr/bin/cc cc /usr/bin/clang 100
        sudo update-alternatives --install /usr/bin/c++ c++ /usr/bin/clang++ 100
        export CCACHE_DIR="$(realpath ccache)"
        ( cd build && ${{ steps.cmake_installer.outputs.CMAKE_BINARY }} -DCMAKE_BUILD_TYPE:STRING=RelWithDebInfo -DZEEK_AGENT_ENABLE_INSTALL:BOOL=ON -DZEEK_AGENT_ENABLE_TESTS:BOOL=ON -DZEEK_AGENT_ZEEK_COMPATIBILITY:STRING="3.1" ../ )

    - name: Build the project
      run: |
        echo "Clang Version: "
        clang --version
        export CCACHE_DIR="$(realpath ccache)"
        ( cd build && cmake --build .)

    - name: Build the documentation
      run: ( cd build && cmake --build . --target doxygen -- -v )

    - name: Run the tests
      run: |
        export ASAN_OPTIONS=detect_container_overflow=0
        ( cd build && cmake --build . --target zeek_agent_tests )

    - name: Install the project
      run: |
        export DESTDIR="$(realpath install)"
        ( cd build && cmake --build . --target install )

    - name: Configure the packaging project
      run: |
        export ZEEK_AGENT_INSTALL_PATH="$(realpath install)"
        ( cd package && ${{ steps.cmake_installer.outputs.CMAKE_BINARY }} -G Ninja -DZEEK_AGENT_ZEEK_COMPATIBILITY:STRING="3.1" -DZEEK_AGENT_INSTALL_PATH:PATH="${ZEEK_AGENT_INSTALL_PATH}" ../ )
    
    - name: Build the packages
      run: |
        export DESTDIR="$(realpath install)"
        sudo apt-get install zip
        zip -r zeek-agent.zip build/

    - name: Locate the packages
      id: package_locations
      run: |
        echo ::set-output name=DEB_PACKAGE_PATH::$(ls *.zip)
        ls
        cd /home/runner/work/zeek-agent/zeek-agent/build
        echo "Following Items are present in the build folder"
        ls
        cd /home/runner/work/zeek-agent/zeek-agent/package
        echo "Following Items are present in the package folder"
        ls

    - name: Store the .deb package artifact
      uses: actions/upload-artifact@v1
      with:
        name: linux_deb_package-${{ matrix.build_type }}-${{ matrix.zeek_version }}
        path: ${{ steps.package_locations.outputs.DEB_PACKAGE_PATH }}
    
    - name: Download the DEB package from the linux_build job (Release, Zeek 3.1)
      uses: actions/download-artifact@v1
      with:
        name: linux_deb_package-Release-3.1
    
    - name: Locate the Zeek 3.1 packages
      id: zeek31_package_locations
      run: |
        echo ::set-output name=DEB_PACKAGE_PATH::$(ls linux_deb_package-Release-3.1/*.zip)
        echo ::set-output name=DEB_ASSET_NAME::zeek31_$(cd linux_deb_package-Release-3.1 && ls *.zip)
        
    - name: Draft the new release
      id: create_release
      if: ${{ env.UPLOAD_RELEASE == 'true' }}
      uses: actions/create-release@v1.0.0
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        tag_name: ${{ github.ref }}
        release_name: Version v1.0.3
        draft: false
        prerelease: false
        
    - name: Upload the Zeek 3.1 .deb package
      id: upload_deb_package_zeek31
      if: ${{ env.UPLOAD_RELEASE == 'true' }}
      uses: actions/upload-release-asset@v1.0.1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        upload_url: ${{ steps.create_release.outputs.upload_url }}
        asset_path: ${{ steps.zeek31_package_locations.outputs.DEB_PACKAGE_PATH }}
        asset_name: ${{ steps.zeek31_package_locations.outputs.DEB_ASSET_NAME }}
        asset_content_type: application/vnd.debian.binary-package
